name: 1-actions-ci-cd-aks

on:
  push:
    branches: [ main ]
    paths: .github/workflows/1-actions-ci-cd-aks.yml
  pull_request:
    branches: none
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:

  build-deploy-aks:
    runs-on: ubuntu-latest
    env:
      ACR_NAME: acrrg3.azurecr.io
      BASE_TAG: 1.0.0-MySQLDB
      IMAGE_NAME: kube-usermgmt-webapp
      IMAGE_TAG: ${{ github.run_number }}

    steps:

    - name: Git Checkout
      uses: actions/checkout@v2

    - name: Azure Login (OIDC)
      uses: azure/login@v1
      with:
        client-id: 68680534-e093-40f4-bf5e-02f659e52bca
        tenant-id: 7228ccd0-4940-47c3-8fc6-ac0294a7a2a0
        subscription-id: 004003ac-1525-495b-ad86-c3fe74dc9f29

    - name: Azure Container Registry Login
      run: |
        az acr login --name acrrg3

    - name: Pull Existing Image
      run: |
        docker pull $ACR_NAME/$IMAGE_NAME:$BASE_TAG

    - name: Retag Image
      run: |
        docker tag $ACR_NAME/$IMAGE_NAME:$BASE_TAG \
                   $ACR_NAME/$IMAGE_NAME:$IMAGE_TAG

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      continue-on-error: true
      with:
        image-ref: '${{ env.ACR_NAME }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}'
        format: 'table'
        exit-code: '1'
        ignore-unfixed: true
        vuln-type: 'os,library'
        severity: 'MEDIUM,HIGH,CRITICAL'

    - name: Push New Tag to ACR
      run: |
        docker push $ACR_NAME/$IMAGE_NAME:$IMAGE_TAG

    - uses: cschleiden/replace-tokens@v1
      with:
        files: '["kubernetes/*.yaml"]'
        tokenPrefix: __
        tokenSuffix: __
      env:
        DOCKER_REPOSITORY: ${{ env.ACR_NAME }}
        IMAGE_NAME: ${{ env.IMAGE_NAME }}
        IMAGE_TAG: ${{ env.IMAGE_TAG }}

    - name: Install kubelogin
      run: |
        curl -LO https://github.com/Azure/kubelogin/releases/latest/download/kubelogin-linux-amd64.zip
        unzip kubelogin-linux-amd64.zip
        sudo mv kubelogin /usr/local/bin/
        kubelogin --version

    - name: Set AKS context
      uses: Azure/aks-set-context@v2.3
      with:
        resource-group: aks-rg3
        cluster-name: aksdemo3
        use-kubelogin: true

    - name: Apply Kubernetes Deployment
      run: |
        kubectl apply --validate=false -f dev/ -n argocd
        sleep 10
        kubectl apply --validate=false -f application-mysql.yaml -n argocd
        sleep 10
        kubectl apply --validate=false -f application-webapp.yaml -n argocd